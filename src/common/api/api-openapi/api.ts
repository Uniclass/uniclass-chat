/* tslint:disable */
/* eslint-disable */
/**
 * Uniclass API
 * <p>Uniclass API - Student, Teacher & Operation</p>  <h5>To use with Generator, First install ...</h5> <pre>     yarn add -D @openapitools/openapi-generator-cli </pre> <h5>Then run ...</h5> <pre>     npx @openapitools/openapi-generator-cli generate --skip-validate-spec -i https://uniclass-api---dev-2fce6.ondigitalocean.app/swagger-yaml -g typescript-axios --additional-properties=paramNaming=snake_case,prependFormOrBodyParameters,sortModelPropertiesByRequiredFlag,useSingleRequestParameter -o ./apps/uniclass-api-consumer/src/api/ </pre> <h5>NOTE: replace <b>-o</b> with <b>api</b> directory</h5> 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AcceptTeacherParams
 */
export interface AcceptTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof AcceptTeacherParams
     */
    'course_id': string;
    /**
     * 
     * @type {string}
     * @memberof AcceptTeacherParams
     */
    'wo_id': string;
    /**
     * 
     * @type {string}
     * @memberof AcceptTeacherParams
     */
    'teacher_id': string;
}
/**
 * 
 * @export
 * @interface ApiStandardResponse
 */
export interface ApiStandardResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiStandardResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ApiStandardResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiStandardResponse
     */
    'time': string;
    /**
     * 
     * @type {object}
     * @memberof ApiStandardResponse
     */
    'payload': object;
}
/**
 * 
 * @export
 * @interface BookCourseByTeacherParams
 */
export interface BookCourseByTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof BookCourseByTeacherParams
     */
    'wo_id': string;
    /**
     * 
     * @type {string}
     * @memberof BookCourseByTeacherParams
     */
    'teacher_id': string;
}
/**
 * 
 * @export
 * @interface ChangeTeacherParams
 */
export interface ChangeTeacherParams {
    /**
     * 
     * @type {RemoveTeacherParams}
     * @memberof ChangeTeacherParams
     */
    'removeTeacherParams': RemoveTeacherParams;
    /**
     * 
     * @type {FindTeacherParams}
     * @memberof ChangeTeacherParams
     */
    'findTeacherParams': FindTeacherParams;
}
/**
 * 
 * @export
 * @interface CreateStudentCourseParams
 */
export interface CreateStudentCourseParams {
    /**
     * 
     * @type {string}
     * @memberof CreateStudentCourseParams
     */
    'student_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentCourseParams
     */
    'subject_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentCourseParams
     */
    'study_time_note'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentCourseParams
     */
    'course_credit_code': string;
    /**
     * 
     * @type {number}
     * @memberof CreateStudentCourseParams
     */
    'course_credit_init': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateStudentCourseParams
     */
    'course_objs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateStudentCourseParams
     */
    'course_note'?: string;
}
/**
 * 
 * @export
 * @interface DeleteStudentCourseParams
 */
export interface DeleteStudentCourseParams {
    /**
     * 
     * @type {string}
     * @memberof DeleteStudentCourseParams
     */
    'course_id': string;
}
/**
 * 
 * @export
 * @interface EvaluateClassByStudentParams
 */
export interface EvaluateClassByStudentParams {
    /**
     * 
     * @type {string}
     * @memberof EvaluateClassByStudentParams
     */
    'course_id': string;
    /**
     * 
     * @type {number}
     * @memberof EvaluateClassByStudentParams
     */
    'class_indx': number;
    /**
     * 
     * @type {number}
     * @memberof EvaluateClassByStudentParams
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface EvaluateClassByTeacherParams
 */
export interface EvaluateClassByTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof EvaluateClassByTeacherParams
     */
    'course_id': string;
    /**
     * 
     * @type {number}
     * @memberof EvaluateClassByTeacherParams
     */
    'class_indx': number;
    /**
     * 
     * @type {object}
     * @memberof EvaluateClassByTeacherParams
     */
    'evaluation': object;
}
/**
 * 
 * @export
 * @interface FindTeacherOverwriteParams
 */
export interface FindTeacherOverwriteParams {
    /**
     * 
     * @type {number}
     * @memberof FindTeacherOverwriteParams
     */
    'teacher_credit_fee'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindTeacherOverwriteParams
     */
    'booking_timeout_hr'?: number;
}
/**
 * 
 * @export
 * @interface FindTeacherParams
 */
export interface FindTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof FindTeacherParams
     */
    'course_id': string;
    /**
     * 
     * @type {string}
     * @memberof FindTeacherParams
     */
    'study_time_note'?: string;
    /**
     * 
     * @type {FindTeacherOverwriteParams}
     * @memberof FindTeacherParams
     */
    'overwrite'?: FindTeacherOverwriteParams;
}
/**
 * 
 * @export
 * @interface GetClassroomToken
 */
export interface GetClassroomToken {
    /**
     * 
     * @type {string}
     * @memberof GetClassroomToken
     */
    'course_id': string;
    /**
     * 
     * @type {number}
     * @memberof GetClassroomToken
     */
    'class_indx': number;
}
/**
 * 
 * @export
 * @interface JoinClassroomByTeacherParams
 */
export interface JoinClassroomByTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof JoinClassroomByTeacherParams
     */
    'course_id': string;
    /**
     * 
     * @type {string}
     * @memberof JoinClassroomByTeacherParams
     */
    'wo_id': string;
    /**
     * 
     * @type {string}
     * @memberof JoinClassroomByTeacherParams
     */
    'teacher_id': string;
    /**
     * 
     * @type {number}
     * @memberof JoinClassroomByTeacherParams
     */
    'class_indx': number;
}
/**
 * 
 * @export
 * @interface JoinWaitingRoomParams
 */
export interface JoinWaitingRoomParams {
    /**
     * 
     * @type {string}
     * @memberof JoinWaitingRoomParams
     */
    'course_id': string;
    /**
     * 
     * @type {number}
     * @memberof JoinWaitingRoomParams
     */
    'class_indx': number;
}
/**
 * 
 * @export
 * @interface RemoveTeacherParams
 */
export interface RemoveTeacherParams {
    /**
     * 
     * @type {string}
     * @memberof RemoveTeacherParams
     */
    'course_id': string;
    /**
     * 
     * @type {string}
     * @memberof RemoveTeacherParams
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface StudentCourseTemplateItem
 */
export interface StudentCourseTemplateItem {
    /**
     * 
     * @type {number}
     * @memberof StudentCourseTemplateItem
     */
    'week_day': number;
    /**
     * 
     * @type {string}
     * @memberof StudentCourseTemplateItem
     */
    'time_hh': string;
}
/**
 * 
 * @export
 * @interface UpdateStudentCourseParams
 */
export interface UpdateStudentCourseParams {
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentCourseParams
     */
    'course_id': string;
}
/**
 * 
 * @export
 * @interface UpsertStudentClassroomItem
 */
export interface UpsertStudentClassroomItem {
    /**
     * 
     * @type {number}
     * @memberof UpsertStudentClassroomItem
     */
    'week_day': number;
    /**
     * 
     * @type {string}
     * @memberof UpsertStudentClassroomItem
     */
    'st_time': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertStudentClassroomItem
     */
    'class_name': string;
}
/**
 * 
 * @export
 * @interface UpsertStudentClassroomParams
 */
export interface UpsertStudentClassroomParams {
    /**
     * 
     * @type {string}
     * @memberof UpsertStudentClassroomParams
     */
    'course_id': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertStudentClassroomParams
     */
    'student_id': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertStudentClassroomParams
     */
    'timezone': string;
    /**
     * 
     * @type {Array<StudentCourseTemplateItem>}
     * @memberof UpsertStudentClassroomParams
     */
    'class_template'?: Array<StudentCourseTemplateItem>;
    /**
     * 
     * @type {Array<UpsertStudentClassroomItem>}
     * @memberof UpsertStudentClassroomParams
     */
    'class_schedule': Array<UpsertStudentClassroomItem>;
}

/**
 * OpsV2StudentCourseApi - axios parameter creator
 * @export
 */
export const OpsV2StudentCourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {AcceptTeacherParams} accept_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCandidateTeacher: async (accept_teacher_params: AcceptTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept_teacher_params' is not null or undefined
            assertParamExists('acceptCandidateTeacher', 'accept_teacher_params', accept_teacher_params)
            const localVarPath = `/opsv2/student-course/teacher/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accept_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Booking a course by Teacher
         * @param {BookCourseByTeacherParams} book_course_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookCourseByTeacher: async (book_course_by_teacher_params: BookCourseByTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'book_course_by_teacher_params' is not null or undefined
            assertParamExists('bookCourseByTeacher', 'book_course_by_teacher_params', book_course_by_teacher_params)
            const localVarPath = `/opsv2/student-course/simulate/teacher/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(book_course_by_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Teacher
         * @param {ChangeTeacherParams} change_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacher: async (change_teacher_params: ChangeTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'change_teacher_params' is not null or undefined
            assertParamExists('changeTeacher', 'change_teacher_params', change_teacher_params)
            const localVarPath = `/opsv2/student-course/teacher/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(change_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Student Course
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourse: async (create_student_course_params: CreateStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'create_student_course_params' is not null or undefined
            assertParamExists('createStudentCourse', 'create_student_course_params', create_student_course_params)
            const localVarPath = `/opsv2/student-course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(create_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Student Course for DMM
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourseDMM: async (create_student_course_params: CreateStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'create_student_course_params' is not null or undefined
            assertParamExists('createStudentCourseDMM', 'create_student_course_params', create_student_course_params)
            const localVarPath = `/opsv2/student-course/dmm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(create_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {DeleteStudentCourseParams} delete_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentCourse: async (delete_student_course_params: DeleteStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delete_student_course_params' is not null or undefined
            assertParamExists('deleteStudentCourse', 'delete_student_course_params', delete_student_course_params)
            const localVarPath = `/opsv2/student-course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(delete_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Student
         * @param {EvaluateClassByStudentParams} evaluate_class_by_student_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByStudent: async (evaluate_class_by_student_params: EvaluateClassByStudentParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluate_class_by_student_params' is not null or undefined
            assertParamExists('evaluateClassByStudent', 'evaluate_class_by_student_params', evaluate_class_by_student_params)
            const localVarPath = `/opsv2/student-course/simulate/student/classroom/post-evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluate_class_by_student_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Teacher
         * @param {EvaluateClassByTeacherParams} evaluate_class_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByTeacher: async (evaluate_class_by_teacher_params: EvaluateClassByTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluate_class_by_teacher_params' is not null or undefined
            assertParamExists('evaluateClassByTeacher', 'evaluate_class_by_teacher_params', evaluate_class_by_teacher_params)
            const localVarPath = `/opsv2/student-course/simulate/teacher/classroom/post-evaluation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluate_class_by_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find Teacher
         * @param {FindTeacherParams} find_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTeacher: async (find_teacher_params: FindTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'find_teacher_params' is not null or undefined
            assertParamExists('findTeacher', 'find_teacher_params', find_teacher_params)
            const localVarPath = `/opsv2/student-course/teacher/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(find_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Teacher get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomToken: async (get_classroom_token: GetClassroomToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'get_classroom_token' is not null or undefined
            assertParamExists('getClassroomToken', 'get_classroom_token', get_classroom_token)
            const localVarPath = `/opsv2/student-course/simulate/teacher/classroom/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(get_classroom_token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Student get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomTokenByStudent: async (get_classroom_token: GetClassroomToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'get_classroom_token' is not null or undefined
            assertParamExists('getClassroomTokenByStudent', 'get_classroom_token', get_classroom_token)
            const localVarPath = `/opsv2/student-course/simulate/student/classroom/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(get_classroom_token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Teacher join classroom
         * @param {JoinClassroomByTeacherParams} join_classroom_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinClassroom: async (join_classroom_by_teacher_params: JoinClassroomByTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'join_classroom_by_teacher_params' is not null or undefined
            assertParamExists('joinClassroom', 'join_classroom_by_teacher_params', join_classroom_by_teacher_params)
            const localVarPath = `/opsv2/student-course/simulate/teacher/classroom/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(join_classroom_by_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Teacher join Waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoom: async (join_waiting_room_params: JoinWaitingRoomParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'join_waiting_room_params' is not null or undefined
            assertParamExists('joinWaitingRoom', 'join_waiting_room_params', join_waiting_room_params)
            const localVarPath = `/opsv2/student-course/simulate/teacher/classroom/waiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(join_waiting_room_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (Simulate) Student Join waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoomByStudent: async (join_waiting_room_params: JoinWaitingRoomParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'join_waiting_room_params' is not null or undefined
            assertParamExists('joinWaitingRoomByStudent', 'join_waiting_room_params', join_waiting_room_params)
            const localVarPath = `/opsv2/student-course/simulate/student/classroom/waiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(join_waiting_room_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deposit_amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATEGeneratePaymedh: async (deposit_amount: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deposit_amount' is not null or undefined
            assertParamExists('sIMULATEGeneratePaymedh', 'deposit_amount', deposit_amount)
            const localVarPath = `/opsv2/student-course/simulate/payment-batch/set-teacher-deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deposit_amount !== undefined) {
                localVarQueryParameter['deposit_amount'] = deposit_amount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATEGeneratePaymentBatch: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/opsv2/student-course/simulate/payment-batch/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATETruancateTable: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/opsv2/student-course/simulate/truncate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student Course
         * @param {UpdateStudentCourseParams} update_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentCourse: async (update_student_course_params: UpdateStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'update_student_course_params' is not null or undefined
            assertParamExists('updateStudentCourse', 'update_student_course_params', update_student_course_params)
            const localVarPath = `/opsv2/student-course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(update_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {UpsertStudentClassroomParams} upsert_student_classroom_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertStudentClassroom: async (upsert_student_classroom_params: UpsertStudentClassroomParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsert_student_classroom_params' is not null or undefined
            assertParamExists('upsertStudentClassroom', 'upsert_student_classroom_params', upsert_student_classroom_params)
            const localVarPath = `/opsv2/student-course/classroom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsert_student_classroom_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpsV2StudentCourseApi - functional programming interface
 * @export
 */
export const OpsV2StudentCourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpsV2StudentCourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {AcceptTeacherParams} accept_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCandidateTeacher(accept_teacher_params: AcceptTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCandidateTeacher(accept_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.acceptCandidateTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Booking a course by Teacher
         * @param {BookCourseByTeacherParams} book_course_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookCourseByTeacher(book_course_by_teacher_params: BookCourseByTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookCourseByTeacher(book_course_by_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.bookCourseByTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change Teacher
         * @param {ChangeTeacherParams} change_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacher(change_teacher_params: ChangeTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacher(change_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.changeTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Student Course
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentCourse(create_student_course_params: CreateStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentCourse(create_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.createStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Student Course for DMM
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentCourseDMM(create_student_course_params: CreateStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentCourseDMM(create_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.createStudentCourseDMM']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {DeleteStudentCourseParams} delete_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentCourse(delete_student_course_params: DeleteStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentCourse(delete_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.deleteStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Student
         * @param {EvaluateClassByStudentParams} evaluate_class_by_student_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateClassByStudent(evaluate_class_by_student_params: EvaluateClassByStudentParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateClassByStudent(evaluate_class_by_student_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.evaluateClassByStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Teacher
         * @param {EvaluateClassByTeacherParams} evaluate_class_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateClassByTeacher(evaluate_class_by_teacher_params: EvaluateClassByTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateClassByTeacher(evaluate_class_by_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.evaluateClassByTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find Teacher
         * @param {FindTeacherParams} find_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTeacher(find_teacher_params: FindTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTeacher(find_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.findTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Teacher get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomToken(get_classroom_token: GetClassroomToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassroomToken(get_classroom_token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.getClassroomToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Student get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomTokenByStudent(get_classroom_token: GetClassroomToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassroomTokenByStudent(get_classroom_token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.getClassroomTokenByStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Teacher join classroom
         * @param {JoinClassroomByTeacherParams} join_classroom_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinClassroom(join_classroom_by_teacher_params: JoinClassroomByTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiStandardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinClassroom(join_classroom_by_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.joinClassroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Teacher join Waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinWaitingRoom(join_waiting_room_params: JoinWaitingRoomParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinWaitingRoom(join_waiting_room_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.joinWaitingRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (Simulate) Student Join waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinWaitingRoomByStudent(join_waiting_room_params: JoinWaitingRoomParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinWaitingRoomByStudent(join_waiting_room_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.joinWaitingRoomByStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deposit_amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sIMULATEGeneratePaymedh(deposit_amount: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sIMULATEGeneratePaymedh(deposit_amount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.sIMULATEGeneratePaymedh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sIMULATEGeneratePaymentBatch(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sIMULATEGeneratePaymentBatch(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.sIMULATEGeneratePaymentBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sIMULATETruancateTable(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sIMULATETruancateTable(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.sIMULATETruancateTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Student Course
         * @param {UpdateStudentCourseParams} update_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentCourse(update_student_course_params: UpdateStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentCourse(update_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.updateStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {UpsertStudentClassroomParams} upsert_student_classroom_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertStudentClassroom(upsert_student_classroom_params: UpsertStudentClassroomParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertStudentClassroom(upsert_student_classroom_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpsV2StudentCourseApi.upsertStudentClassroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpsV2StudentCourseApi - factory interface
 * @export
 */
export const OpsV2StudentCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpsV2StudentCourseApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {OpsV2StudentCourseApiAcceptCandidateTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCandidateTeacher(requestParameters: OpsV2StudentCourseApiAcceptCandidateTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.acceptCandidateTeacher(requestParameters.accept_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Booking a course by Teacher
         * @param {OpsV2StudentCourseApiBookCourseByTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookCourseByTeacher(requestParameters: OpsV2StudentCourseApiBookCourseByTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bookCourseByTeacher(requestParameters.book_course_by_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Teacher
         * @param {OpsV2StudentCourseApiChangeTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacher(requestParameters: OpsV2StudentCourseApiChangeTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeTeacher(requestParameters.change_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Student Course
         * @param {OpsV2StudentCourseApiCreateStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourse(requestParameters: OpsV2StudentCourseApiCreateStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createStudentCourse(requestParameters.create_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Student Course for DMM
         * @param {OpsV2StudentCourseApiCreateStudentCourseDMMRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourseDMM(requestParameters: OpsV2StudentCourseApiCreateStudentCourseDMMRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createStudentCourseDMM(requestParameters.create_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {OpsV2StudentCourseApiDeleteStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentCourse(requestParameters: OpsV2StudentCourseApiDeleteStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteStudentCourse(requestParameters.delete_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Student
         * @param {OpsV2StudentCourseApiEvaluateClassByStudentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByStudent(requestParameters: OpsV2StudentCourseApiEvaluateClassByStudentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.evaluateClassByStudent(requestParameters.evaluate_class_by_student_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Evaluate a classroom By Teacher
         * @param {OpsV2StudentCourseApiEvaluateClassByTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByTeacher(requestParameters: OpsV2StudentCourseApiEvaluateClassByTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.evaluateClassByTeacher(requestParameters.evaluate_class_by_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find Teacher
         * @param {OpsV2StudentCourseApiFindTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTeacher(requestParameters: OpsV2StudentCourseApiFindTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findTeacher(requestParameters.find_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Teacher get Classroom Access Token
         * @param {OpsV2StudentCourseApiGetClassroomTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomToken(requestParameters: OpsV2StudentCourseApiGetClassroomTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getClassroomToken(requestParameters.get_classroom_token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Student get Classroom Access Token
         * @param {OpsV2StudentCourseApiGetClassroomTokenByStudentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomTokenByStudent(requestParameters: OpsV2StudentCourseApiGetClassroomTokenByStudentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getClassroomTokenByStudent(requestParameters.get_classroom_token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Teacher join classroom
         * @param {OpsV2StudentCourseApiJoinClassroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinClassroom(requestParameters: OpsV2StudentCourseApiJoinClassroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiStandardResponse> {
            return localVarFp.joinClassroom(requestParameters.join_classroom_by_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Teacher join Waiting Room
         * @param {OpsV2StudentCourseApiJoinWaitingRoomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoom(requestParameters: OpsV2StudentCourseApiJoinWaitingRoomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.joinWaitingRoom(requestParameters.join_waiting_room_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (Simulate) Student Join waiting Room
         * @param {OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoomByStudent(requestParameters: OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.joinWaitingRoomByStudent(requestParameters.join_waiting_room_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATEGeneratePaymedh(requestParameters: OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sIMULATEGeneratePaymedh(requestParameters.deposit_amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATEGeneratePaymentBatch(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.sIMULATEGeneratePaymentBatch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sIMULATETruancateTable(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sIMULATETruancateTable(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student Course
         * @param {OpsV2StudentCourseApiUpdateStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentCourse(requestParameters: OpsV2StudentCourseApiUpdateStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStudentCourse(requestParameters.update_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {OpsV2StudentCourseApiUpsertStudentClassroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertStudentClassroom(requestParameters: OpsV2StudentCourseApiUpsertStudentClassroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.upsertStudentClassroom(requestParameters.upsert_student_classroom_params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptCandidateTeacher operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiAcceptCandidateTeacherRequest
 */
export interface OpsV2StudentCourseApiAcceptCandidateTeacherRequest {
    /**
     * 
     * @type {AcceptTeacherParams}
     * @memberof OpsV2StudentCourseApiAcceptCandidateTeacher
     */
    readonly accept_teacher_params: AcceptTeacherParams
}

/**
 * Request parameters for bookCourseByTeacher operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiBookCourseByTeacherRequest
 */
export interface OpsV2StudentCourseApiBookCourseByTeacherRequest {
    /**
     * 
     * @type {BookCourseByTeacherParams}
     * @memberof OpsV2StudentCourseApiBookCourseByTeacher
     */
    readonly book_course_by_teacher_params: BookCourseByTeacherParams
}

/**
 * Request parameters for changeTeacher operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiChangeTeacherRequest
 */
export interface OpsV2StudentCourseApiChangeTeacherRequest {
    /**
     * 
     * @type {ChangeTeacherParams}
     * @memberof OpsV2StudentCourseApiChangeTeacher
     */
    readonly change_teacher_params: ChangeTeacherParams
}

/**
 * Request parameters for createStudentCourse operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiCreateStudentCourseRequest
 */
export interface OpsV2StudentCourseApiCreateStudentCourseRequest {
    /**
     * 
     * @type {CreateStudentCourseParams}
     * @memberof OpsV2StudentCourseApiCreateStudentCourse
     */
    readonly create_student_course_params: CreateStudentCourseParams
}

/**
 * Request parameters for createStudentCourseDMM operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiCreateStudentCourseDMMRequest
 */
export interface OpsV2StudentCourseApiCreateStudentCourseDMMRequest {
    /**
     * 
     * @type {CreateStudentCourseParams}
     * @memberof OpsV2StudentCourseApiCreateStudentCourseDMM
     */
    readonly create_student_course_params: CreateStudentCourseParams
}

/**
 * Request parameters for deleteStudentCourse operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiDeleteStudentCourseRequest
 */
export interface OpsV2StudentCourseApiDeleteStudentCourseRequest {
    /**
     * 
     * @type {DeleteStudentCourseParams}
     * @memberof OpsV2StudentCourseApiDeleteStudentCourse
     */
    readonly delete_student_course_params: DeleteStudentCourseParams
}

/**
 * Request parameters for evaluateClassByStudent operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiEvaluateClassByStudentRequest
 */
export interface OpsV2StudentCourseApiEvaluateClassByStudentRequest {
    /**
     * 
     * @type {EvaluateClassByStudentParams}
     * @memberof OpsV2StudentCourseApiEvaluateClassByStudent
     */
    readonly evaluate_class_by_student_params: EvaluateClassByStudentParams
}

/**
 * Request parameters for evaluateClassByTeacher operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiEvaluateClassByTeacherRequest
 */
export interface OpsV2StudentCourseApiEvaluateClassByTeacherRequest {
    /**
     * 
     * @type {EvaluateClassByTeacherParams}
     * @memberof OpsV2StudentCourseApiEvaluateClassByTeacher
     */
    readonly evaluate_class_by_teacher_params: EvaluateClassByTeacherParams
}

/**
 * Request parameters for findTeacher operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiFindTeacherRequest
 */
export interface OpsV2StudentCourseApiFindTeacherRequest {
    /**
     * 
     * @type {FindTeacherParams}
     * @memberof OpsV2StudentCourseApiFindTeacher
     */
    readonly find_teacher_params: FindTeacherParams
}

/**
 * Request parameters for getClassroomToken operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiGetClassroomTokenRequest
 */
export interface OpsV2StudentCourseApiGetClassroomTokenRequest {
    /**
     * 
     * @type {GetClassroomToken}
     * @memberof OpsV2StudentCourseApiGetClassroomToken
     */
    readonly get_classroom_token: GetClassroomToken
}

/**
 * Request parameters for getClassroomTokenByStudent operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiGetClassroomTokenByStudentRequest
 */
export interface OpsV2StudentCourseApiGetClassroomTokenByStudentRequest {
    /**
     * 
     * @type {GetClassroomToken}
     * @memberof OpsV2StudentCourseApiGetClassroomTokenByStudent
     */
    readonly get_classroom_token: GetClassroomToken
}

/**
 * Request parameters for joinClassroom operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiJoinClassroomRequest
 */
export interface OpsV2StudentCourseApiJoinClassroomRequest {
    /**
     * 
     * @type {JoinClassroomByTeacherParams}
     * @memberof OpsV2StudentCourseApiJoinClassroom
     */
    readonly join_classroom_by_teacher_params: JoinClassroomByTeacherParams
}

/**
 * Request parameters for joinWaitingRoom operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiJoinWaitingRoomRequest
 */
export interface OpsV2StudentCourseApiJoinWaitingRoomRequest {
    /**
     * 
     * @type {JoinWaitingRoomParams}
     * @memberof OpsV2StudentCourseApiJoinWaitingRoom
     */
    readonly join_waiting_room_params: JoinWaitingRoomParams
}

/**
 * Request parameters for joinWaitingRoomByStudent operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest
 */
export interface OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest {
    /**
     * 
     * @type {JoinWaitingRoomParams}
     * @memberof OpsV2StudentCourseApiJoinWaitingRoomByStudent
     */
    readonly join_waiting_room_params: JoinWaitingRoomParams
}

/**
 * Request parameters for sIMULATEGeneratePaymedh operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest
 */
export interface OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest {
    /**
     * 
     * @type {string}
     * @memberof OpsV2StudentCourseApiSIMULATEGeneratePaymedh
     */
    readonly deposit_amount: string
}

/**
 * Request parameters for updateStudentCourse operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiUpdateStudentCourseRequest
 */
export interface OpsV2StudentCourseApiUpdateStudentCourseRequest {
    /**
     * 
     * @type {UpdateStudentCourseParams}
     * @memberof OpsV2StudentCourseApiUpdateStudentCourse
     */
    readonly update_student_course_params: UpdateStudentCourseParams
}

/**
 * Request parameters for upsertStudentClassroom operation in OpsV2StudentCourseApi.
 * @export
 * @interface OpsV2StudentCourseApiUpsertStudentClassroomRequest
 */
export interface OpsV2StudentCourseApiUpsertStudentClassroomRequest {
    /**
     * 
     * @type {UpsertStudentClassroomParams}
     * @memberof OpsV2StudentCourseApiUpsertStudentClassroom
     */
    readonly upsert_student_classroom_params: UpsertStudentClassroomParams
}

/**
 * OpsV2StudentCourseApi - object-oriented interface
 * @export
 * @class OpsV2StudentCourseApi
 * @extends {BaseAPI}
 */
export class OpsV2StudentCourseApi extends BaseAPI {
    /**
     * 
     * @summary Accept Candidate Teacher
     * @param {OpsV2StudentCourseApiAcceptCandidateTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public acceptCandidateTeacher(requestParameters: OpsV2StudentCourseApiAcceptCandidateTeacherRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).acceptCandidateTeacher(requestParameters.accept_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Booking a course by Teacher
     * @param {OpsV2StudentCourseApiBookCourseByTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public bookCourseByTeacher(requestParameters: OpsV2StudentCourseApiBookCourseByTeacherRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).bookCourseByTeacher(requestParameters.book_course_by_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Teacher
     * @param {OpsV2StudentCourseApiChangeTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public changeTeacher(requestParameters: OpsV2StudentCourseApiChangeTeacherRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).changeTeacher(requestParameters.change_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Student Course
     * @param {OpsV2StudentCourseApiCreateStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public createStudentCourse(requestParameters: OpsV2StudentCourseApiCreateStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).createStudentCourse(requestParameters.create_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Student Course for DMM
     * @param {OpsV2StudentCourseApiCreateStudentCourseDMMRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public createStudentCourseDMM(requestParameters: OpsV2StudentCourseApiCreateStudentCourseDMMRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).createStudentCourseDMM(requestParameters.create_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student Course
     * @param {OpsV2StudentCourseApiDeleteStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public deleteStudentCourse(requestParameters: OpsV2StudentCourseApiDeleteStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).deleteStudentCourse(requestParameters.delete_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Evaluate a classroom By Student
     * @param {OpsV2StudentCourseApiEvaluateClassByStudentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public evaluateClassByStudent(requestParameters: OpsV2StudentCourseApiEvaluateClassByStudentRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).evaluateClassByStudent(requestParameters.evaluate_class_by_student_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Evaluate a classroom By Teacher
     * @param {OpsV2StudentCourseApiEvaluateClassByTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public evaluateClassByTeacher(requestParameters: OpsV2StudentCourseApiEvaluateClassByTeacherRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).evaluateClassByTeacher(requestParameters.evaluate_class_by_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find Teacher
     * @param {OpsV2StudentCourseApiFindTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public findTeacher(requestParameters: OpsV2StudentCourseApiFindTeacherRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).findTeacher(requestParameters.find_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Teacher get Classroom Access Token
     * @param {OpsV2StudentCourseApiGetClassroomTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public getClassroomToken(requestParameters: OpsV2StudentCourseApiGetClassroomTokenRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).getClassroomToken(requestParameters.get_classroom_token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Student get Classroom Access Token
     * @param {OpsV2StudentCourseApiGetClassroomTokenByStudentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public getClassroomTokenByStudent(requestParameters: OpsV2StudentCourseApiGetClassroomTokenByStudentRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).getClassroomTokenByStudent(requestParameters.get_classroom_token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Teacher join classroom
     * @param {OpsV2StudentCourseApiJoinClassroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public joinClassroom(requestParameters: OpsV2StudentCourseApiJoinClassroomRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).joinClassroom(requestParameters.join_classroom_by_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Teacher join Waiting Room
     * @param {OpsV2StudentCourseApiJoinWaitingRoomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public joinWaitingRoom(requestParameters: OpsV2StudentCourseApiJoinWaitingRoomRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).joinWaitingRoom(requestParameters.join_waiting_room_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (Simulate) Student Join waiting Room
     * @param {OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public joinWaitingRoomByStudent(requestParameters: OpsV2StudentCourseApiJoinWaitingRoomByStudentRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).joinWaitingRoomByStudent(requestParameters.join_waiting_room_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public sIMULATEGeneratePaymedh(requestParameters: OpsV2StudentCourseApiSIMULATEGeneratePaymedhRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).sIMULATEGeneratePaymedh(requestParameters.deposit_amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public sIMULATEGeneratePaymentBatch(options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).sIMULATEGeneratePaymentBatch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public sIMULATETruancateTable(options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).sIMULATETruancateTable(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student Course
     * @param {OpsV2StudentCourseApiUpdateStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public updateStudentCourse(requestParameters: OpsV2StudentCourseApiUpdateStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).updateStudentCourse(requestParameters.update_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert Student Classroom
     * @param {OpsV2StudentCourseApiUpsertStudentClassroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpsV2StudentCourseApi
     */
    public upsertStudentClassroom(requestParameters: OpsV2StudentCourseApiUpsertStudentClassroomRequest, options?: RawAxiosRequestConfig) {
        return OpsV2StudentCourseApiFp(this.configuration).upsertStudentClassroom(requestParameters.upsert_student_classroom_params, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentCourseApi - axios parameter creator
 * @export
 */
export const StudentCourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {AcceptTeacherParams} accept_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCandidateTeacher: async (accept_teacher_params: AcceptTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept_teacher_params' is not null or undefined
            assertParamExists('acceptCandidateTeacher', 'accept_teacher_params', accept_teacher_params)
            const localVarPath = `/student/course/teacher/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accept_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Teacher
         * @param {ChangeTeacherParams} change_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacher: async (change_teacher_params: ChangeTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'change_teacher_params' is not null or undefined
            assertParamExists('changeTeacher', 'change_teacher_params', change_teacher_params)
            const localVarPath = `/student/course/teacher/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(change_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Student Course
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourse: async (create_student_course_params: CreateStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'create_student_course_params' is not null or undefined
            assertParamExists('createStudentCourse', 'create_student_course_params', create_student_course_params)
            const localVarPath = `/student/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(create_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {DeleteStudentCourseParams} delete_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentCourse: async (delete_student_course_params: DeleteStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delete_student_course_params' is not null or undefined
            assertParamExists('deleteStudentCourse', 'delete_student_course_params', delete_student_course_params)
            const localVarPath = `/student/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(delete_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Evaluate Classroom (Post-class)
         * @param {EvaluateClassByStudentParams} evaluate_class_by_student_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByStudent: async (evaluate_class_by_student_params: EvaluateClassByStudentParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluate_class_by_student_params' is not null or undefined
            assertParamExists('evaluateClassByStudent', 'evaluate_class_by_student_params', evaluate_class_by_student_params)
            const localVarPath = `/student/course/classroom/post-evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(evaluate_class_by_student_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find Teacher
         * @param {FindTeacherParams} find_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTeacher: async (find_teacher_params: FindTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'find_teacher_params' is not null or undefined
            assertParamExists('findTeacher', 'find_teacher_params', find_teacher_params)
            const localVarPath = `/student/course/teacher/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(find_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomToken: async (get_classroom_token: GetClassroomToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'get_classroom_token' is not null or undefined
            assertParamExists('getClassroomToken', 'get_classroom_token', get_classroom_token)
            const localVarPath = `/student/course/classroom/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(get_classroom_token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join Waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoom: async (join_waiting_room_params: JoinWaitingRoomParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'join_waiting_room_params' is not null or undefined
            assertParamExists('joinWaitingRoom', 'join_waiting_room_params', join_waiting_room_params)
            const localVarPath = `/student/course/classroom/waiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(join_waiting_room_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Student Course
         * @param {UpdateStudentCourseParams} update_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentCourse: async (update_student_course_params: UpdateStudentCourseParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'update_student_course_params' is not null or undefined
            assertParamExists('updateStudentCourse', 'update_student_course_params', update_student_course_params)
            const localVarPath = `/student/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(update_student_course_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {UpsertStudentClassroomParams} upsert_student_classroom_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertStudentClassroom: async (upsert_student_classroom_params: UpsertStudentClassroomParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsert_student_classroom_params' is not null or undefined
            assertParamExists('upsertStudentClassroom', 'upsert_student_classroom_params', upsert_student_classroom_params)
            const localVarPath = `/student/course/classroom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsert_student_classroom_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentCourseApi - functional programming interface
 * @export
 */
export const StudentCourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentCourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {AcceptTeacherParams} accept_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptCandidateTeacher(accept_teacher_params: AcceptTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptCandidateTeacher(accept_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.acceptCandidateTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change Teacher
         * @param {ChangeTeacherParams} change_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeTeacher(change_teacher_params: ChangeTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeTeacher(change_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.changeTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Student Course
         * @param {CreateStudentCourseParams} create_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentCourse(create_student_course_params: CreateStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentCourse(create_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.createStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {DeleteStudentCourseParams} delete_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStudentCourse(delete_student_course_params: DeleteStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStudentCourse(delete_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.deleteStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Evaluate Classroom (Post-class)
         * @param {EvaluateClassByStudentParams} evaluate_class_by_student_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateClassByStudent(evaluate_class_by_student_params: EvaluateClassByStudentParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateClassByStudent(evaluate_class_by_student_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.evaluateClassByStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find Teacher
         * @param {FindTeacherParams} find_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTeacher(find_teacher_params: FindTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTeacher(find_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.findTeacher']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Classroom Access Token
         * @param {GetClassroomToken} get_classroom_token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassroomToken(get_classroom_token: GetClassroomToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClassroomToken(get_classroom_token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.getClassroomToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Join Waiting Room
         * @param {JoinWaitingRoomParams} join_waiting_room_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinWaitingRoom(join_waiting_room_params: JoinWaitingRoomParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinWaitingRoom(join_waiting_room_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.joinWaitingRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Student Course
         * @param {UpdateStudentCourseParams} update_student_course_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentCourse(update_student_course_params: UpdateStudentCourseParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentCourse(update_student_course_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.updateStudentCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {UpsertStudentClassroomParams} upsert_student_classroom_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertStudentClassroom(upsert_student_classroom_params: UpsertStudentClassroomParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertStudentClassroom(upsert_student_classroom_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentCourseApi.upsertStudentClassroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentCourseApi - factory interface
 * @export
 */
export const StudentCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentCourseApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept Candidate Teacher
         * @param {StudentCourseApiAcceptCandidateTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCandidateTeacher(requestParameters: StudentCourseApiAcceptCandidateTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.acceptCandidateTeacher(requestParameters.accept_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Teacher
         * @param {StudentCourseApiChangeTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacher(requestParameters: StudentCourseApiChangeTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeTeacher(requestParameters.change_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Student Course
         * @param {StudentCourseApiCreateStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentCourse(requestParameters: StudentCourseApiCreateStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createStudentCourse(requestParameters.create_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Student Course
         * @param {StudentCourseApiDeleteStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentCourse(requestParameters: StudentCourseApiDeleteStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteStudentCourse(requestParameters.delete_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Evaluate Classroom (Post-class)
         * @param {StudentCourseApiEvaluateClassByStudentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateClassByStudent(requestParameters: StudentCourseApiEvaluateClassByStudentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.evaluateClassByStudent(requestParameters.evaluate_class_by_student_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find Teacher
         * @param {StudentCourseApiFindTeacherRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTeacher(requestParameters: StudentCourseApiFindTeacherRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findTeacher(requestParameters.find_teacher_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Classroom Access Token
         * @param {StudentCourseApiGetClassroomTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassroomToken(requestParameters: StudentCourseApiGetClassroomTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getClassroomToken(requestParameters.get_classroom_token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join Waiting Room
         * @param {StudentCourseApiJoinWaitingRoomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinWaitingRoom(requestParameters: StudentCourseApiJoinWaitingRoomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.joinWaitingRoom(requestParameters.join_waiting_room_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Student Course
         * @param {StudentCourseApiUpdateStudentCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentCourse(requestParameters: StudentCourseApiUpdateStudentCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStudentCourse(requestParameters.update_student_course_params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert Student Classroom
         * @param {StudentCourseApiUpsertStudentClassroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertStudentClassroom(requestParameters: StudentCourseApiUpsertStudentClassroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.upsertStudentClassroom(requestParameters.upsert_student_classroom_params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptCandidateTeacher operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiAcceptCandidateTeacherRequest
 */
export interface StudentCourseApiAcceptCandidateTeacherRequest {
    /**
     * 
     * @type {AcceptTeacherParams}
     * @memberof StudentCourseApiAcceptCandidateTeacher
     */
    readonly accept_teacher_params: AcceptTeacherParams
}

/**
 * Request parameters for changeTeacher operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiChangeTeacherRequest
 */
export interface StudentCourseApiChangeTeacherRequest {
    /**
     * 
     * @type {ChangeTeacherParams}
     * @memberof StudentCourseApiChangeTeacher
     */
    readonly change_teacher_params: ChangeTeacherParams
}

/**
 * Request parameters for createStudentCourse operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiCreateStudentCourseRequest
 */
export interface StudentCourseApiCreateStudentCourseRequest {
    /**
     * 
     * @type {CreateStudentCourseParams}
     * @memberof StudentCourseApiCreateStudentCourse
     */
    readonly create_student_course_params: CreateStudentCourseParams
}

/**
 * Request parameters for deleteStudentCourse operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiDeleteStudentCourseRequest
 */
export interface StudentCourseApiDeleteStudentCourseRequest {
    /**
     * 
     * @type {DeleteStudentCourseParams}
     * @memberof StudentCourseApiDeleteStudentCourse
     */
    readonly delete_student_course_params: DeleteStudentCourseParams
}

/**
 * Request parameters for evaluateClassByStudent operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiEvaluateClassByStudentRequest
 */
export interface StudentCourseApiEvaluateClassByStudentRequest {
    /**
     * 
     * @type {EvaluateClassByStudentParams}
     * @memberof StudentCourseApiEvaluateClassByStudent
     */
    readonly evaluate_class_by_student_params: EvaluateClassByStudentParams
}

/**
 * Request parameters for findTeacher operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiFindTeacherRequest
 */
export interface StudentCourseApiFindTeacherRequest {
    /**
     * 
     * @type {FindTeacherParams}
     * @memberof StudentCourseApiFindTeacher
     */
    readonly find_teacher_params: FindTeacherParams
}

/**
 * Request parameters for getClassroomToken operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiGetClassroomTokenRequest
 */
export interface StudentCourseApiGetClassroomTokenRequest {
    /**
     * 
     * @type {GetClassroomToken}
     * @memberof StudentCourseApiGetClassroomToken
     */
    readonly get_classroom_token: GetClassroomToken
}

/**
 * Request parameters for joinWaitingRoom operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiJoinWaitingRoomRequest
 */
export interface StudentCourseApiJoinWaitingRoomRequest {
    /**
     * 
     * @type {JoinWaitingRoomParams}
     * @memberof StudentCourseApiJoinWaitingRoom
     */
    readonly join_waiting_room_params: JoinWaitingRoomParams
}

/**
 * Request parameters for updateStudentCourse operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiUpdateStudentCourseRequest
 */
export interface StudentCourseApiUpdateStudentCourseRequest {
    /**
     * 
     * @type {UpdateStudentCourseParams}
     * @memberof StudentCourseApiUpdateStudentCourse
     */
    readonly update_student_course_params: UpdateStudentCourseParams
}

/**
 * Request parameters for upsertStudentClassroom operation in StudentCourseApi.
 * @export
 * @interface StudentCourseApiUpsertStudentClassroomRequest
 */
export interface StudentCourseApiUpsertStudentClassroomRequest {
    /**
     * 
     * @type {UpsertStudentClassroomParams}
     * @memberof StudentCourseApiUpsertStudentClassroom
     */
    readonly upsert_student_classroom_params: UpsertStudentClassroomParams
}

/**
 * StudentCourseApi - object-oriented interface
 * @export
 * @class StudentCourseApi
 * @extends {BaseAPI}
 */
export class StudentCourseApi extends BaseAPI {
    /**
     * 
     * @summary Accept Candidate Teacher
     * @param {StudentCourseApiAcceptCandidateTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public acceptCandidateTeacher(requestParameters: StudentCourseApiAcceptCandidateTeacherRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).acceptCandidateTeacher(requestParameters.accept_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Teacher
     * @param {StudentCourseApiChangeTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public changeTeacher(requestParameters: StudentCourseApiChangeTeacherRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).changeTeacher(requestParameters.change_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Student Course
     * @param {StudentCourseApiCreateStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public createStudentCourse(requestParameters: StudentCourseApiCreateStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).createStudentCourse(requestParameters.create_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Student Course
     * @param {StudentCourseApiDeleteStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public deleteStudentCourse(requestParameters: StudentCourseApiDeleteStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).deleteStudentCourse(requestParameters.delete_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Evaluate Classroom (Post-class)
     * @param {StudentCourseApiEvaluateClassByStudentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public evaluateClassByStudent(requestParameters: StudentCourseApiEvaluateClassByStudentRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).evaluateClassByStudent(requestParameters.evaluate_class_by_student_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find Teacher
     * @param {StudentCourseApiFindTeacherRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public findTeacher(requestParameters: StudentCourseApiFindTeacherRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).findTeacher(requestParameters.find_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Classroom Access Token
     * @param {StudentCourseApiGetClassroomTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public getClassroomToken(requestParameters: StudentCourseApiGetClassroomTokenRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).getClassroomToken(requestParameters.get_classroom_token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join Waiting Room
     * @param {StudentCourseApiJoinWaitingRoomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public joinWaitingRoom(requestParameters: StudentCourseApiJoinWaitingRoomRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).joinWaitingRoom(requestParameters.join_waiting_room_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Student Course
     * @param {StudentCourseApiUpdateStudentCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public updateStudentCourse(requestParameters: StudentCourseApiUpdateStudentCourseRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).updateStudentCourse(requestParameters.update_student_course_params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert Student Classroom
     * @param {StudentCourseApiUpsertStudentClassroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCourseApi
     */
    public upsertStudentClassroom(requestParameters: StudentCourseApiUpsertStudentClassroomRequest, options?: RawAxiosRequestConfig) {
        return StudentCourseApiFp(this.configuration).upsertStudentClassroom(requestParameters.upsert_student_classroom_params, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherCourseApi - axios parameter creator
 * @export
 */
export const TeacherCourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Join Classroom
         * @param {JoinClassroomByTeacherParams} join_classroom_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinClassroom: async (join_classroom_by_teacher_params: JoinClassroomByTeacherParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'join_classroom_by_teacher_params' is not null or undefined
            assertParamExists('joinClassroom', 'join_classroom_by_teacher_params', join_classroom_by_teacher_params)
            const localVarPath = `/teacher/course/classroom/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(join_classroom_by_teacher_params, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherCourseApi - functional programming interface
 * @export
 */
export const TeacherCourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherCourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Join Classroom
         * @param {JoinClassroomByTeacherParams} join_classroom_by_teacher_params 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinClassroom(join_classroom_by_teacher_params: JoinClassroomByTeacherParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiStandardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinClassroom(join_classroom_by_teacher_params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherCourseApi.joinClassroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeacherCourseApi - factory interface
 * @export
 */
export const TeacherCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherCourseApiFp(configuration)
    return {
        /**
         * 
         * @summary Join Classroom
         * @param {TeacherCourseApiJoinClassroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinClassroom(requestParameters: TeacherCourseApiJoinClassroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiStandardResponse> {
            return localVarFp.joinClassroom(requestParameters.join_classroom_by_teacher_params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for joinClassroom operation in TeacherCourseApi.
 * @export
 * @interface TeacherCourseApiJoinClassroomRequest
 */
export interface TeacherCourseApiJoinClassroomRequest {
    /**
     * 
     * @type {JoinClassroomByTeacherParams}
     * @memberof TeacherCourseApiJoinClassroom
     */
    readonly join_classroom_by_teacher_params: JoinClassroomByTeacherParams
}

/**
 * TeacherCourseApi - object-oriented interface
 * @export
 * @class TeacherCourseApi
 * @extends {BaseAPI}
 */
export class TeacherCourseApi extends BaseAPI {
    /**
     * 
     * @summary Join Classroom
     * @param {TeacherCourseApiJoinClassroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherCourseApi
     */
    public joinClassroom(requestParameters: TeacherCourseApiJoinClassroomRequest, options?: RawAxiosRequestConfig) {
        return TeacherCourseApiFp(this.configuration).joinClassroom(requestParameters.join_classroom_by_teacher_params, options).then((request) => request(this.axios, this.basePath));
    }
}



